{"version":3,"file":"react-battery-gauge.cjs.production.min.js","sources":["../src/lib/constants/index.ts","../src/lib/store/context.ts","../src/lib/hooks/useGaugeContext.ts","../src/lib/hooks/useBatteryDimensions.ts","../src/lib/components/Battery/index.tsx","../src/lib/store/Provider.tsx","../src/lib/Canvas.tsx","../src/lib/hooks/useLevelDimensions.ts","../src/lib/utils/index.ts","../src/lib/components/BatteryLevel.tsx","../src/lib/components/ReadingText.tsx","../src/lib/hooks/useCounterAnimation.ts","../src/lib/components/Charging.tsx","../src/index.tsx","../src/lib/hooks/useClipPathHash.ts"],"sourcesContent":["export const CANVAS_WIDTH = 100;\nconst CANVAS_HEIGHT = 52;\n\nexport const BATTERY_ASPECT_RATIO = CANVAS_HEIGHT / CANVAS_WIDTH; // battery is horizontal\nexport const BATTERY_BODY = 'batteryBody';\nexport const BATTERY_CAP = 'batteryCap';\nexport const BATTERY_METER = 'batteryMeter';\nexport const READING_TEXT = 'readingText';\nexport const CHARGING_FLASH = 'chargingFlash';\n\n// clipPath ids\nexport const CLIP_METER = 'clip_level_meter';\nexport const CLIP_METER_FILLED = 'clip_level_meter_filled';\nexport const CLIP_METER_EMPTY = 'clip_level_meter_empty';\nexport const CLIP_CAP = 'battery_cap_clip';\n","import { BATTERY_ASPECT_RATIO, CANVAS_WIDTH } from './../constants/index';\nimport { createContext } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\n\nexport const defaultState = {\n  canvasWidth: CANVAS_WIDTH,\n  canvasHeight: CANVAS_WIDTH * BATTERY_ASPECT_RATIO,\n  aspectRatio: BATTERY_ASPECT_RATIO,\n  padding: 0,\n  value: 50,\n  chargingStartValue: 1,\n  maxValue: 100,\n  clipPathHash: '',\n  orientation: 'horizontal' as TGaugeCanvas['orientation'],\n  animated: false,\n  charging: false,\n  customization: {\n    batteryBody: {\n      strokeWidth: 4,\n      cornerRadius: 6,\n      fill: 'none',\n      strokeColor: '#111',\n    },\n    batteryCap: {\n      fill: 'none',\n      strokeWidth: 4,\n      strokeColor: '#111',\n      cornerRadius: 2,\n      capToBodyRatio: 0.4,\n    },\n    batteryMeter: {\n      fill: 'green',\n      lowBatteryValue: 15,\n      lowBatteryFill: 'red',\n      outerGap: 1,\n      noOfCells: 1,\n      interCellsGap: 1,\n    },\n    readingText: {\n      lightContrastColor: '#111',\n      darkContrastColor: '#fff',\n      lowBatteryColor: 'red',\n      fontFamily: 'Helvetica',\n      fontSize: 14,\n      showPercentage: true,\n    },\n    chargingFlash: {\n      scale: undefined,\n      fill: 'orange',\n      animated: true,\n      animationDuration: 1000,\n    },\n  },\n};\n\nexport const Context = createContext<TGaugeCanvas>(defaultState);\n","import { ContextType, useContext } from 'react';\nimport { Context } from '../store/context';\n\nexport function useGaugeContext() {\n  return useContext(Context);\n}\n\nexport type UseGaugeContextReturnValue = ContextType<typeof Context>;\n","import { useGaugeContext } from './useGaugeContext';\n\nexport const useBatteryDimensions = (batteryCapRatio: number) => {\n  const { canvasHeight, canvasWidth, padding } = useGaugeContext();\n  const objectHeight = canvasHeight - 2 * padding; // total canvas height minus vertical padding\n  const capHeight = objectHeight * batteryCapRatio;\n  const capWidth = capHeight / 2;\n\n  return {\n    bodyWidth: canvasWidth - capWidth - 2 * padding,\n    bodyHeight: canvasHeight - 2 * padding,\n    capWidth,\n    capHeight,\n  };\n};\n","import React from 'react';\nimport { BATTERY_BODY, BATTERY_CAP, CLIP_CAP } from '../../constants';\nimport { useBatteryDimensions } from '../../hooks/useBatteryDimensions';\nimport { useGaugeContext } from '../../hooks/useGaugeContext';\n\nexport const Battery = () => {\n  const { canvasWidth, canvasHeight, padding, customization, clipPathHash } =\n    useGaugeContext();\n\n  const {\n    strokeColor: bodyStrokeColor,\n    strokeWidth: bodyStrokeWidth,\n    fill: bodyFill,\n    cornerRadius: bodyCornerRadius,\n  } = customization[BATTERY_BODY];\n\n  const {\n    strokeColor: capStrokeColor,\n    strokeWidth: capStrokeWidth,\n    fill: capFill,\n    cornerRadius: capCornerRadius,\n    capToBodyRatio,\n  } = customization[BATTERY_CAP];\n\n  const { bodyWidth, bodyHeight, capWidth, capHeight } =\n    useBatteryDimensions(capToBodyRatio);\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_CAP + clipPathHash}>\n          <rect\n            x={canvasWidth - padding - capWidth}\n            y={(canvasHeight - capHeight - capStrokeWidth) / 2}\n            width={capWidth}\n            height={capHeight + capStrokeWidth}\n            strokeWidth={capStrokeWidth}\n          />\n        </clipPath>\n      </defs>\n      <rect\n        className={BATTERY_BODY}\n        x={padding}\n        y={padding}\n        rx={bodyCornerRadius}\n        ry={bodyCornerRadius}\n        width={bodyWidth}\n        height={bodyHeight}\n        strokeWidth={bodyStrokeWidth}\n        fill={bodyFill}\n        stroke={bodyStrokeColor}\n      />\n      <rect\n        clipPath={`url(#${CLIP_CAP + clipPathHash})`}\n        className={BATTERY_CAP}\n        x={canvasWidth - padding - capWidth - capCornerRadius}\n        y={(canvasHeight - capHeight) / 2}\n        rx={capCornerRadius}\n        ry={capCornerRadius}\n        width={capWidth}\n        height={capHeight}\n        strokeWidth={capStrokeWidth}\n        fill={capFill}\n        stroke={capStrokeColor}\n      />\n    </g>\n  );\n};\n","import React, { FC } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\nimport { Context } from './context';\n\ninterface Props {\n  value: TGaugeCanvas & { clipPathHash: string };\n}\n\nexport const CanvasProvider: FC<Props> = ({ children, value }) => {\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import React from 'react';\nimport { TGaugeCanvas } from '../typings';\nimport { CanvasProvider } from './store/Provider';\n\nexport interface TCanvasProps\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'>,\n    TGaugeCanvas {}\n\nexport const Canvas = (props: TCanvasProps) => {\n  const {\n    children,\n    canvasWidth,\n    canvasHeight,\n    padding,\n    value,\n    chargingStartValue,\n    maxValue,\n    orientation,\n    customization,\n    clipPathHash,\n    ...otherSvgProps\n  } = props;\n  return (\n    <CanvasProvider\n      value={{\n        canvasWidth,\n        canvasHeight,\n        padding,\n        value,\n        chargingStartValue,\n        maxValue,\n        orientation,\n        customization,\n        clipPathHash,\n      }}\n    >\n      <svg viewBox={`0 0 ${canvasWidth} ${canvasHeight}`} {...otherSvgProps}>\n        {children}\n      </svg>\n    </CanvasProvider>\n  );\n};\n","import { BATTERY_CAP, BATTERY_METER, BATTERY_BODY } from './../constants/index';\nimport { useMemo } from 'react';\nimport { useBatteryDimensions } from './useBatteryDimensions';\nimport { useGaugeContext } from './useGaugeContext';\n\nexport const useLevelDimensions = () => {\n  const { padding, customization } = useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { capToBodyRatio } = customization[BATTERY_CAP];\n  const { outerGap } = customization[BATTERY_METER];\n  const { bodyWidth, bodyHeight } = useBatteryDimensions(capToBodyRatio);\n\n  return useMemo(() => {\n    const innerBodyWidth = bodyWidth - strokeWidth;\n    const innerBodyHeight = bodyHeight - strokeWidth;\n    return {\n      x: padding + strokeWidth / 2 + outerGap,\n      y: padding + strokeWidth / 2 + outerGap,\n      width: innerBodyWidth - 2 * outerGap,\n      height: innerBodyHeight - 2 * outerGap,\n    };\n  }, [bodyWidth, bodyHeight, outerGap, padding, strokeWidth]);\n};\n","export function getValueInPercentage(value: number, maxValue: number) {\n  return Math.round((value / maxValue) * 100);\n}\n\nexport function checkLowBattery(value: number, lowBatteryValue: number) {\n  return value < lowBatteryValue;\n}\n\nexport function getVisibleCellsCount(\n  value: number,\n  maxValue: number,\n  noOfCells: number\n) {\n  return Math.floor(Math.abs(value / maxValue) * noOfCells);\n}\nexport const timing = (progress: number, easing?: 'linear') => {\n  if (easing === 'linear') {\n    return progress;\n  }\n  return progress;\n};\n","import React, { useMemo } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_FILLED,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport { checkLowBattery, getVisibleCellsCount } from '../utils';\n\nexport const BatteryLevel = () => {\n  const { value, maxValue, customization, clipPathHash } = useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fill,\n    lowBatteryFill,\n    gradFill,\n    lowBatteryValue,\n    outerGap,\n    noOfCells,\n    interCellsGap,\n  } = customization[BATTERY_METER];\n  const { strokeWidth: bodyStrokeWidth, cornerRadius: bodyCornerRadius } =\n    customization[BATTERY_BODY];\n\n  const cellList = useMemo(() => {\n    const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n    if (noOfVisibleCells === 0 && value > 0) {\n      return ['cell'];\n    }\n    return new Array(noOfVisibleCells).fill('cell');\n  }, [value, maxValue, noOfCells]);\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            rx={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            ry={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            width={width}\n            height={height}\n          />\n        </clipPath>\n        {noOfCells < 2 && gradFill && (\n          <linearGradient id={'levelGradient' + clipPathHash}>\n            {gradFill.map((item) => {\n              return (\n                <stop\n                  key={item.color}\n                  offset={item.offset + '%'}\n                  stopColor={item.color}\n                />\n              );\n            })}\n          </linearGradient>\n        )}\n      </defs>\n      {noOfCells === 1 && (\n        <g>\n          {gradFill ? (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER_FILLED + clipPathHash})`}\n              x={x}\n              y={y}\n              width={width}\n              height={height}\n              fill={`url(#levelGradient${clipPathHash})`}\n            />\n          ) : (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER + clipPathHash})`}\n              x={x}\n              y={y}\n              width={(width * value) / maxValue}\n              height={height}\n              fill={\n                checkLowBattery(value, lowBatteryValue) ? lowBatteryFill : fill\n              }\n            />\n          )}\n        </g>\n      )}\n      <g>\n        {noOfCells > 1 &&\n          cellList.map((_item, index) => {\n            return (\n              <rect\n                key={index}\n                className={BATTERY_METER}\n                clipPath={`url(#${CLIP_METER + clipPathHash})`}\n                x={x + ((width + interCellsGap) / noOfCells) * index}\n                y={y}\n                width={width / noOfCells - interCellsGap}\n                height={height}\n                fill={\n                  checkLowBattery(value, lowBatteryValue)\n                    ? lowBatteryFill\n                    : fill\n                }\n              />\n            );\n          })}\n      </g>\n    </g>\n  );\n};\n","import React from 'react';\nimport {\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_EMPTY,\n  CLIP_METER_FILLED,\n  READING_TEXT,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport {\n  checkLowBattery,\n  getValueInPercentage,\n  getVisibleCellsCount,\n} from '../utils';\nimport type { FormatValue } from '../../typings';\n\ntype ReadingTextProps = {\n  formatValue: FormatValue;\n};\nexport const ReadingText = (props: ReadingTextProps) => {\n  const { formatValue } = props;\n  const { value, maxValue, orientation, customization, clipPathHash } =\n    useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fontFamily,\n    darkContrastColor,\n    lightContrastColor,\n    lowBatteryColor,\n    showPercentage,\n    fontSize,\n    ...otherTextProps\n  } = customization[READING_TEXT];\n  const { lowBatteryValue, noOfCells, interCellsGap } =\n    customization[BATTERY_METER];\n  const percentageSign = showPercentage ? '%' : '';\n  const valueRatio = value / maxValue;\n  const isCellTypeBattery = noOfCells > 1;\n  const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n  const noOfInvisibleCells = noOfCells - noOfVisibleCells;\n  const widthPerCell = width / noOfCells;\n  const readingValue = getValueInPercentage(value, maxValue);\n\n  const renderTextElement = (contrastColor: string, clipPathId: string) => {\n    return (\n      <text\n        className={READING_TEXT}\n        x={x + width / 2}\n        y={y + height / 2}\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n        clipPath={`url(#${clipPathId})`}\n        fill={\n          checkLowBattery(value, lowBatteryValue)\n            ? lowBatteryColor\n            : contrastColor\n        }\n        fontFamily={fontFamily}\n        fontWeight=\"bold\"\n        fontSize={fontSize}\n        writingMode={orientation === 'vertical' ? 'tb' : 'lr'}\n        {...otherTextProps}\n      >\n        {formatValue(readingValue) + percentageSign}\n      </text>\n    );\n  };\n  const areaFilledWidth = Math.max(\n    isCellTypeBattery\n      ? widthPerCell * noOfVisibleCells - interCellsGap / 2\n      : width * valueRatio,\n    0\n  );\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER_FILLED + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            width={areaFilledWidth}\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n        <clipPath id={CLIP_METER_EMPTY + clipPathHash}>\n          <rect\n            x={x + areaFilledWidth}\n            y={y}\n            width={\n              isCellTypeBattery\n                ? widthPerCell * noOfInvisibleCells\n                : width * (1 - valueRatio)\n            }\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n      </defs>\n      {renderTextElement(darkContrastColor, CLIP_METER_FILLED + clipPathHash)}\n      {renderTextElement(lightContrastColor, CLIP_METER_EMPTY + clipPathHash)}\n    </g>\n  );\n};\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { timing } from '../utils';\n\nexport type AnimationType = {\n  value: number;\n  duration?: number;\n  startValue?: number;\n  enabled: boolean;\n  direction?: 'both' | 'reverse' | 'forward';\n  iterationCount?: number | 'infinite';\n  easing?: 'linear';\n};\n\nconst MAX_ANIMATION_PROGRESS = 1;\nconst MAX_LOOP_ANIMATION_PROGRESS = 2;\n\nexport const useCounterAnimation = ({\n  value,\n  duration = 1000,\n  startValue = 0,\n  enabled = false,\n  direction = 'forward',\n  iterationCount = 1,\n  easing = 'linear',\n}: AnimationType) => {\n  const [counterValue, setCounterValue] = useState(startValue);\n  const iteration = useRef(0);\n\n  const runAnimation = useCallback(() => {\n    iteration.current += 1;\n\n    return new Promise((resolve) => {\n      let startTime = 0;\n      const nextIterationDurationGap = duration / 5;\n      const step = (currentTime: number) => {\n        if (!startTime) {\n          startTime = currentTime;\n        }\n\n        //calculate the value to be used in calculating the number to be displayed\n        const progress = timing(\n          Math.min(\n            (currentTime - startTime) / duration,\n            direction === 'both'\n              ? MAX_LOOP_ANIMATION_PROGRESS\n              : MAX_ANIMATION_PROGRESS\n          ),\n          easing\n        );\n        function getNewValue(animationDir: AnimationType['direction']) {\n          if (animationDir === 'reverse') {\n            return (1 - progress) * (value - counterValue) + counterValue;\n          } else if (progress > 1 && animationDir === 'both') {\n            return (\n              (MAX_LOOP_ANIMATION_PROGRESS - progress) *\n                (value - counterValue) +\n              counterValue\n            );\n          } else {\n            return progress * (value - counterValue) + counterValue;\n          }\n        }\n        const newValue = getNewValue(direction);\n\n        //calculate what to be displayed using the value gotten above\n        setCounterValue(Math.floor(newValue));\n\n        if (\n          progress < MAX_ANIMATION_PROGRESS ||\n          (direction === 'both' && progress < MAX_LOOP_ANIMATION_PROGRESS)\n        ) {\n          window.requestAnimationFrame(step); //continue animation\n        } else {\n          window.cancelAnimationFrame(window.requestAnimationFrame(step));\n          resolve(true); //complete animation\n        }\n      };\n\n      // First loop of animation, take no delay\n      function runFirstIteration() {\n        window.requestAnimationFrame(step);\n      }\n\n      // For second loop for animation, take some pause before starting\n      function runNextIteration() {\n        setTimeout(() => {\n          window.requestAnimationFrame(step);\n        }, nextIterationDurationGap);\n      }\n      // start animation\n      (function startAnimation() {\n        iteration.current > 1 ? runNextIteration() : runFirstIteration();\n      })();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  useEffect(() => {\n    if (enabled) {\n      let animation = runAnimation();\n      const restartAnimation = () => {\n        animation.then(() => {\n          if (iterationCount === 'infinite') {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n          if (iteration.current < iterationCount) {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n        });\n      };\n      restartAnimation();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enabled, iterationCount, value]);\n\n  return enabled ? counterValue : value;\n};\n","import React, { ReactElement } from 'react';\nimport { BATTERY_BODY, CHARGING_FLASH } from '../constants';\nimport { useCounterAnimation } from '../hooks/useCounterAnimation';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\n\ntype Props = Omit<React.SVGProps<SVGPathElement>, \"scale\">\n\n// As per icon path\nconst iconWidth = 16.8; // As per path\nconst iconHeight = 28.7;\n\nexport default function Charging(pathProps: Props): ReactElement {\n  const { canvasWidth, canvasHeight, orientation, customization } =\n    useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { fill, scale, animated, animationDuration } = customization[CHARGING_FLASH];\n  const animatedOpacityPer = useCounterAnimation({\n    value: 100,\n    enabled: animated,\n    direction: 'both',\n    iterationCount: 'infinite',\n    duration: animationDuration,\n    startValue: 20,\n  });\n\n  const { width } = useLevelDimensions();\n  const iconXPos = width / 2 + iconWidth / 2;\n  const iconYPos = canvasHeight / 2 - iconHeight / 2;\n  const transformScale = scale ? `scale(${scale})` : '';\n  return (\n    <g\n      transform={\n        orientation === 'vertical'\n          ? `rotate(${-90})${transformScale}`\n          : transformScale\n      }\n      style={{\n        transformOrigin: `${canvasWidth / 2 - strokeWidth}px ${\n          canvasHeight / 2 - strokeWidth / 2\n        }px`,\n      }}\n      opacity={animatedOpacityPer / 100}\n    >\n      <path\n        d={`M${iconXPos},${iconYPos}l-13,16.8l7.4,0l-1.8,11.9l11.2,-16.8l-7.4,0l3.6,-11.9z`}\n        fill={fill}\n        {...pathProps}\n      />\n    </g>\n  );\n}\n","import React, { FC } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_CAP,\n  BATTERY_METER,\n  CANVAS_WIDTH,\n  CHARGING_FLASH,\n  READING_TEXT,\n} from './lib/constants';\nimport { Battery } from './lib/components/Battery';\nimport { Canvas } from './lib/Canvas';\nimport { BatteryLevel } from './lib/components/BatteryLevel';\nimport type {\n  DeepPartial,\n  FormatValue,\n  TGaugeCanvas,\n  TGaugeCustom,\n} from './typings';\nimport { defaultState } from './lib/store/context';\nimport { ReadingText } from './lib/components/ReadingText';\nimport { useCounterAnimation } from './lib/hooks/useCounterAnimation';\nimport { useClipPathHash } from './lib/hooks/useClipPathHash';\nimport Charging from './lib/components/Charging';\n\nexport interface Props\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'> {\n  /**\n   * Meter value range [0-100]\n   */\n  value: TGaugeCanvas['value'];\n  /**\n   * Meter max value\n   */\n  maxValue?: TGaugeCanvas['maxValue'];\n  /**\n   * Charging starting value\n   */\n  chargingStartValue?: TGaugeCanvas['chargingStartValue'];\n  /**\n   * Changes orientation, keeping text horizontal\n   */\n  orientation?: TGaugeCanvas['orientation'];\n\n  /**\n   * We don't like passing both width and height, can create unusual looking shape.\n   * Size will help gauge to achieve the desired size maintaining aspect ratio\n   */\n  size?: number;\n  /**\n   * Gauge aspect ratio,\n   * At padding 0 easy to create battery types ->\n   * D = 0.56,\n   * C = 0.52,\n   * AA = 0.28,\n   * AAA = 0.23,\n   * AAAA = 0.19 ,\n   * default C battery\n   */\n  aspectRatio?: number;\n  /**\n   * Padding of gauge within canvas\n   */\n  padding?: TGaugeCanvas['padding'];\n  /**\n   * Enable animation on mount\n   */\n  animated?: boolean;\n  /**\n   * Battery is charging\n   */\n  charging?: boolean;\n  /**\n   * Format the visible reading text as per your need\n   * Note: you can turn off percentage symbol from customizations\n   */\n  formatValue?: FormatValue;\n  /**\n   * All components customization\n   */\n  customization?: DeepPartial<TGaugeCustom>;\n}\n\nexport const BatteryGauge: FC<Props> = ({\n  size = 300,\n  aspectRatio = defaultState.aspectRatio,\n  children,\n  padding = defaultState.padding,\n  value = defaultState.value,\n  chargingStartValue = defaultState.chargingStartValue,\n  maxValue = defaultState.maxValue,\n  customization = defaultState.customization,\n  orientation = defaultState.orientation,\n  animated = defaultState.animated,\n  charging = defaultState.charging,\n  formatValue = (value) => value,\n  ...restSvgProps\n}) => {\n  const canvasHeight = Math.round(CANVAS_WIDTH * aspectRatio);\n  const height = Math.round(size * aspectRatio);\n  const clipPathHash = useClipPathHash();\n  const noLowBatteryColor = charging\n    ? {\n        lowBatteryFill:\n          customization[BATTERY_METER]?.fill ||\n          defaultState.customization[BATTERY_METER].fill,\n      }\n    : {};\n\n  const allCustomization: TGaugeCustom = {\n    [BATTERY_BODY]: {\n      ...defaultState.customization[BATTERY_BODY],\n      ...customization[BATTERY_BODY],\n    },\n    [BATTERY_CAP]: {\n      ...defaultState.customization[BATTERY_CAP],\n      ...customization[BATTERY_CAP],\n    },\n    [BATTERY_METER]: {\n      ...defaultState.customization[BATTERY_METER],\n      ...customization[BATTERY_METER],\n      ...noLowBatteryColor,\n    },\n    [READING_TEXT]: {\n      ...defaultState.customization[READING_TEXT],\n      ...customization[READING_TEXT],\n    },\n    [CHARGING_FLASH]: {\n      ...defaultState.customization[CHARGING_FLASH],\n      ...customization[CHARGING_FLASH],\n    },\n  };\n  const canvasPadding = allCustomization.batteryBody.strokeWidth / 2 + padding;\n  const newValue = useCounterAnimation({\n    value: value,\n    enabled: animated,\n  });\n  const chargingValue = useCounterAnimation({\n    startValue: chargingStartValue,\n    value: maxValue,\n    enabled: charging,\n    iterationCount: 'infinite',\n    duration: 2000,\n  });\n  return (\n    <Canvas\n      width={size}\n      height={orientation === 'vertical' ? size : height}\n      canvasWidth={CANVAS_WIDTH}\n      canvasHeight={canvasHeight}\n      padding={canvasPadding}\n      value={charging ? chargingValue : newValue}\n      chargingStartValue={chargingStartValue}\n      maxValue={!maxValue ? 1 : maxValue}\n      orientation={orientation}\n      customization={allCustomization}\n      clipPathHash={clipPathHash}\n      {...restSvgProps}\n    >\n      <g\n        transform={\n          orientation === 'vertical'\n            ? `rotate(-90,${CANVAS_WIDTH / 2},${canvasHeight / 2})` // rotate at right top corner\n            : ''\n        }\n      >\n        <Battery />\n        <BatteryLevel />\n        {charging ? <Charging /> : <ReadingText formatValue={formatValue} />}\n        {children}\n      </g>\n    </Canvas>\n  );\n};\n\nexport default BatteryGauge;\n","import { useEffect, useState } from 'react';\n\nexport function useClipPathHash() {\n  const [hash, setHash] = useState<string>('');\n  useEffect(() => {\n    setHash((Math.random() + 1).toString(36).substring(7));\n  }, []);\n  return hash;\n}\n"],"names":["CLIP_METER","defaultState","canvasWidth","canvasHeight","CANVAS_WIDTH","aspectRatio","CANVAS_HEIGHT","padding","value","chargingStartValue","maxValue","clipPathHash","orientation","animated","charging","customization","batteryBody","strokeWidth","cornerRadius","fill","strokeColor","batteryCap","capToBodyRatio","batteryMeter","lowBatteryValue","lowBatteryFill","outerGap","noOfCells","interCellsGap","readingText","lightContrastColor","darkContrastColor","lowBatteryColor","fontFamily","fontSize","showPercentage","chargingFlash","scale","undefined","animationDuration","Context","createContext","useGaugeContext","useContext","useBatteryDimensions","batteryCapRatio","_useGaugeContext","capHeight","capWidth","bodyWidth","bodyHeight","Battery","_customization$BATTER","bodyStrokeColor","bodyStrokeWidth","bodyFill","bodyCornerRadius","_customization$BATTER2","capStrokeColor","capStrokeWidth","capFill","capCornerRadius","_useBatteryDimensions","React","id","x","y","width","height","className","rx","ry","stroke","clipPath","CanvasProvider","_ref","Provider","children","Canvas","props","otherSvgProps","_objectWithoutPropertiesLoose","_excluded","viewBox","useLevelDimensions","useMemo","checkLowBattery","getVisibleCellsCount","Math","floor","abs","BatteryLevel","_useLevelDimensions","gradFill","cellList","noOfVisibleCells","Array","map","item","key","color","offset","stopColor","_item","index","ReadingText","formatValue","_customization$READIN","otherTextProps","percentageSign","valueRatio","isCellTypeBattery","noOfInvisibleCells","widthPerCell","readingValue","round","getValueInPercentage","renderTextElement","contrastColor","clipPathId","dominantBaseline","textAnchor","fontWeight","writingMode","areaFilledWidth","max","useCounterAnimation","_ref$duration","duration","_ref$startValue","startValue","_ref$enabled","enabled","_ref$direction","direction","_ref$iterationCount","iterationCount","_useState","useState","counterValue","setCounterValue","iteration","useRef","runAnimation","useCallback","current","Promise","resolve","startTime","step","currentTime","animationDir","progress","easing","timing","min","newValue","window","requestAnimationFrame","cancelAnimationFrame","setTimeout","useEffect","animation","restartAnimation","then","Charging","pathProps","_customization$CHARGI","animatedOpacityPer","transformScale","transform","style","transformOrigin","opacity","d","iconWidth","iconHeight","BatteryGauge","hash","setHash","size","_ref$size","_ref$aspectRatio","_ref$padding","_ref$value","_ref$chargingStartVal","_ref$maxValue","_ref$customization","_ref$orientation","_ref$animated","_ref$charging","_ref$formatValue","restSvgProps","random","toString","substring","noLowBatteryColor","allCustomization","_allCustomization","_extends","canvasPadding","chargingValue"],"mappings":"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"}