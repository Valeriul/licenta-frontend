{"version":3,"file":"react-battery-gauge.cjs.development.js","sources":["../src/lib/constants/index.ts","../src/lib/store/context.ts","../src/lib/hooks/useGaugeContext.ts","../src/lib/hooks/useBatteryDimensions.ts","../src/lib/components/Battery/index.tsx","../src/lib/store/Provider.tsx","../src/lib/Canvas.tsx","../src/lib/hooks/useLevelDimensions.ts","../src/lib/utils/index.ts","../src/lib/components/BatteryLevel.tsx","../src/lib/components/ReadingText.tsx","../src/lib/hooks/useCounterAnimation.ts","../src/lib/hooks/useClipPathHash.ts","../src/lib/components/Charging.tsx","../src/index.tsx"],"sourcesContent":["export const CANVAS_WIDTH = 100;\nconst CANVAS_HEIGHT = 52;\n\nexport const BATTERY_ASPECT_RATIO = CANVAS_HEIGHT / CANVAS_WIDTH; // battery is horizontal\nexport const BATTERY_BODY = 'batteryBody';\nexport const BATTERY_CAP = 'batteryCap';\nexport const BATTERY_METER = 'batteryMeter';\nexport const READING_TEXT = 'readingText';\nexport const CHARGING_FLASH = 'chargingFlash';\n\n// clipPath ids\nexport const CLIP_METER = 'clip_level_meter';\nexport const CLIP_METER_FILLED = 'clip_level_meter_filled';\nexport const CLIP_METER_EMPTY = 'clip_level_meter_empty';\nexport const CLIP_CAP = 'battery_cap_clip';\n","import { BATTERY_ASPECT_RATIO, CANVAS_WIDTH } from './../constants/index';\nimport { createContext } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\n\nexport const defaultState = {\n  canvasWidth: CANVAS_WIDTH,\n  canvasHeight: CANVAS_WIDTH * BATTERY_ASPECT_RATIO,\n  aspectRatio: BATTERY_ASPECT_RATIO,\n  padding: 0,\n  value: 50,\n  chargingStartValue: 1,\n  maxValue: 100,\n  clipPathHash: '',\n  orientation: 'horizontal' as TGaugeCanvas['orientation'],\n  animated: false,\n  charging: false,\n  customization: {\n    batteryBody: {\n      strokeWidth: 4,\n      cornerRadius: 6,\n      fill: 'none',\n      strokeColor: '#111',\n    },\n    batteryCap: {\n      fill: 'none',\n      strokeWidth: 4,\n      strokeColor: '#111',\n      cornerRadius: 2,\n      capToBodyRatio: 0.4,\n    },\n    batteryMeter: {\n      fill: 'green',\n      lowBatteryValue: 15,\n      lowBatteryFill: 'red',\n      outerGap: 1,\n      noOfCells: 1,\n      interCellsGap: 1,\n    },\n    readingText: {\n      lightContrastColor: '#111',\n      darkContrastColor: '#fff',\n      lowBatteryColor: 'red',\n      fontFamily: 'Helvetica',\n      fontSize: 14,\n      showPercentage: true,\n    },\n    chargingFlash: {\n      scale: undefined,\n      fill: 'orange',\n      animated: true,\n      animationDuration: 1000,\n    },\n  },\n};\n\nexport const Context = createContext<TGaugeCanvas>(defaultState);\n","import { ContextType, useContext } from 'react';\nimport { Context } from '../store/context';\n\nexport function useGaugeContext() {\n  return useContext(Context);\n}\n\nexport type UseGaugeContextReturnValue = ContextType<typeof Context>;\n","import { useGaugeContext } from './useGaugeContext';\n\nexport const useBatteryDimensions = (batteryCapRatio: number) => {\n  const { canvasHeight, canvasWidth, padding } = useGaugeContext();\n  const objectHeight = canvasHeight - 2 * padding; // total canvas height minus vertical padding\n  const capHeight = objectHeight * batteryCapRatio;\n  const capWidth = capHeight / 2;\n\n  return {\n    bodyWidth: canvasWidth - capWidth - 2 * padding,\n    bodyHeight: canvasHeight - 2 * padding,\n    capWidth,\n    capHeight,\n  };\n};\n","import React from 'react';\nimport { BATTERY_BODY, BATTERY_CAP, CLIP_CAP } from '../../constants';\nimport { useBatteryDimensions } from '../../hooks/useBatteryDimensions';\nimport { useGaugeContext } from '../../hooks/useGaugeContext';\n\nexport const Battery = () => {\n  const { canvasWidth, canvasHeight, padding, customization, clipPathHash } =\n    useGaugeContext();\n\n  const {\n    strokeColor: bodyStrokeColor,\n    strokeWidth: bodyStrokeWidth,\n    fill: bodyFill,\n    cornerRadius: bodyCornerRadius,\n  } = customization[BATTERY_BODY];\n\n  const {\n    strokeColor: capStrokeColor,\n    strokeWidth: capStrokeWidth,\n    fill: capFill,\n    cornerRadius: capCornerRadius,\n    capToBodyRatio,\n  } = customization[BATTERY_CAP];\n\n  const { bodyWidth, bodyHeight, capWidth, capHeight } =\n    useBatteryDimensions(capToBodyRatio);\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_CAP + clipPathHash}>\n          <rect\n            x={canvasWidth - padding - capWidth}\n            y={(canvasHeight - capHeight - capStrokeWidth) / 2}\n            width={capWidth}\n            height={capHeight + capStrokeWidth}\n            strokeWidth={capStrokeWidth}\n          />\n        </clipPath>\n      </defs>\n      <rect\n        className={BATTERY_BODY}\n        x={padding}\n        y={padding}\n        rx={bodyCornerRadius}\n        ry={bodyCornerRadius}\n        width={bodyWidth}\n        height={bodyHeight}\n        strokeWidth={bodyStrokeWidth}\n        fill={bodyFill}\n        stroke={bodyStrokeColor}\n      />\n      <rect\n        clipPath={`url(#${CLIP_CAP + clipPathHash})`}\n        className={BATTERY_CAP}\n        x={canvasWidth - padding - capWidth - capCornerRadius}\n        y={(canvasHeight - capHeight) / 2}\n        rx={capCornerRadius}\n        ry={capCornerRadius}\n        width={capWidth}\n        height={capHeight}\n        strokeWidth={capStrokeWidth}\n        fill={capFill}\n        stroke={capStrokeColor}\n      />\n    </g>\n  );\n};\n","import React, { FC } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\nimport { Context } from './context';\n\ninterface Props {\n  value: TGaugeCanvas & { clipPathHash: string };\n}\n\nexport const CanvasProvider: FC<Props> = ({ children, value }) => {\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import React from 'react';\nimport { TGaugeCanvas } from '../typings';\nimport { CanvasProvider } from './store/Provider';\n\nexport interface TCanvasProps\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'>,\n    TGaugeCanvas {}\n\nexport const Canvas = (props: TCanvasProps) => {\n  const {\n    children,\n    canvasWidth,\n    canvasHeight,\n    padding,\n    value,\n    chargingStartValue,\n    maxValue,\n    orientation,\n    customization,\n    clipPathHash,\n    ...otherSvgProps\n  } = props;\n  return (\n    <CanvasProvider\n      value={{\n        canvasWidth,\n        canvasHeight,\n        padding,\n        value,\n        chargingStartValue,\n        maxValue,\n        orientation,\n        customization,\n        clipPathHash,\n      }}\n    >\n      <svg viewBox={`0 0 ${canvasWidth} ${canvasHeight}`} {...otherSvgProps}>\n        {children}\n      </svg>\n    </CanvasProvider>\n  );\n};\n","import { BATTERY_CAP, BATTERY_METER, BATTERY_BODY } from './../constants/index';\nimport { useMemo } from 'react';\nimport { useBatteryDimensions } from './useBatteryDimensions';\nimport { useGaugeContext } from './useGaugeContext';\n\nexport const useLevelDimensions = () => {\n  const { padding, customization } = useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { capToBodyRatio } = customization[BATTERY_CAP];\n  const { outerGap } = customization[BATTERY_METER];\n  const { bodyWidth, bodyHeight } = useBatteryDimensions(capToBodyRatio);\n\n  return useMemo(() => {\n    const innerBodyWidth = bodyWidth - strokeWidth;\n    const innerBodyHeight = bodyHeight - strokeWidth;\n    return {\n      x: padding + strokeWidth / 2 + outerGap,\n      y: padding + strokeWidth / 2 + outerGap,\n      width: innerBodyWidth - 2 * outerGap,\n      height: innerBodyHeight - 2 * outerGap,\n    };\n  }, [bodyWidth, bodyHeight, outerGap, padding, strokeWidth]);\n};\n","export function getValueInPercentage(value: number, maxValue: number) {\n  return Math.round((value / maxValue) * 100);\n}\n\nexport function checkLowBattery(value: number, lowBatteryValue: number) {\n  return value < lowBatteryValue;\n}\n\nexport function getVisibleCellsCount(\n  value: number,\n  maxValue: number,\n  noOfCells: number\n) {\n  return Math.floor(Math.abs(value / maxValue) * noOfCells);\n}\nexport const timing = (progress: number, easing?: 'linear') => {\n  if (easing === 'linear') {\n    return progress;\n  }\n  return progress;\n};\n","import React, { useMemo } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_FILLED,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport { checkLowBattery, getVisibleCellsCount } from '../utils';\n\nexport const BatteryLevel = () => {\n  const { value, maxValue, customization, clipPathHash } = useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fill,\n    lowBatteryFill,\n    gradFill,\n    lowBatteryValue,\n    outerGap,\n    noOfCells,\n    interCellsGap,\n  } = customization[BATTERY_METER];\n  const { strokeWidth: bodyStrokeWidth, cornerRadius: bodyCornerRadius } =\n    customization[BATTERY_BODY];\n\n  const cellList = useMemo(() => {\n    const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n    if (noOfVisibleCells === 0 && value > 0) {\n      return ['cell'];\n    }\n    return new Array(noOfVisibleCells).fill('cell');\n  }, [value, maxValue, noOfCells]);\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            rx={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            ry={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            width={width}\n            height={height}\n          />\n        </clipPath>\n        {noOfCells < 2 && gradFill && (\n          <linearGradient id={'levelGradient' + clipPathHash}>\n            {gradFill.map((item) => {\n              return (\n                <stop\n                  key={item.color}\n                  offset={item.offset + '%'}\n                  stopColor={item.color}\n                />\n              );\n            })}\n          </linearGradient>\n        )}\n      </defs>\n      {noOfCells === 1 && (\n        <g>\n          {gradFill ? (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER_FILLED + clipPathHash})`}\n              x={x}\n              y={y}\n              width={width}\n              height={height}\n              fill={`url(#levelGradient${clipPathHash})`}\n            />\n          ) : (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER + clipPathHash})`}\n              x={x}\n              y={y}\n              width={(width * value) / maxValue}\n              height={height}\n              fill={\n                checkLowBattery(value, lowBatteryValue) ? lowBatteryFill : fill\n              }\n            />\n          )}\n        </g>\n      )}\n      <g>\n        {noOfCells > 1 &&\n          cellList.map((_item, index) => {\n            return (\n              <rect\n                key={index}\n                className={BATTERY_METER}\n                clipPath={`url(#${CLIP_METER + clipPathHash})`}\n                x={x + ((width + interCellsGap) / noOfCells) * index}\n                y={y}\n                width={width / noOfCells - interCellsGap}\n                height={height}\n                fill={\n                  checkLowBattery(value, lowBatteryValue)\n                    ? lowBatteryFill\n                    : fill\n                }\n              />\n            );\n          })}\n      </g>\n    </g>\n  );\n};\n","import React from 'react';\nimport {\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_EMPTY,\n  CLIP_METER_FILLED,\n  READING_TEXT,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport {\n  checkLowBattery,\n  getValueInPercentage,\n  getVisibleCellsCount,\n} from '../utils';\nimport type { FormatValue } from '../../typings';\n\ntype ReadingTextProps = {\n  formatValue: FormatValue;\n};\nexport const ReadingText = (props: ReadingTextProps) => {\n  const { formatValue } = props;\n  const { value, maxValue, orientation, customization, clipPathHash } =\n    useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fontFamily,\n    darkContrastColor,\n    lightContrastColor,\n    lowBatteryColor,\n    showPercentage,\n    fontSize,\n    ...otherTextProps\n  } = customization[READING_TEXT];\n  const { lowBatteryValue, noOfCells, interCellsGap } =\n    customization[BATTERY_METER];\n  const percentageSign = showPercentage ? '%' : '';\n  const valueRatio = value / maxValue;\n  const isCellTypeBattery = noOfCells > 1;\n  const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n  const noOfInvisibleCells = noOfCells - noOfVisibleCells;\n  const widthPerCell = width / noOfCells;\n  const readingValue = getValueInPercentage(value, maxValue);\n\n  const renderTextElement = (contrastColor: string, clipPathId: string) => {\n    return (\n      <text\n        className={READING_TEXT}\n        x={x + width / 2}\n        y={y + height / 2}\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n        clipPath={`url(#${clipPathId})`}\n        fill={\n          checkLowBattery(value, lowBatteryValue)\n            ? lowBatteryColor\n            : contrastColor\n        }\n        fontFamily={fontFamily}\n        fontWeight=\"bold\"\n        fontSize={fontSize}\n        writingMode={orientation === 'vertical' ? 'tb' : 'lr'}\n        {...otherTextProps}\n      >\n        {formatValue(readingValue) + percentageSign}\n      </text>\n    );\n  };\n  const areaFilledWidth = Math.max(\n    isCellTypeBattery\n      ? widthPerCell * noOfVisibleCells - interCellsGap / 2\n      : width * valueRatio,\n    0\n  );\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER_FILLED + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            width={areaFilledWidth}\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n        <clipPath id={CLIP_METER_EMPTY + clipPathHash}>\n          <rect\n            x={x + areaFilledWidth}\n            y={y}\n            width={\n              isCellTypeBattery\n                ? widthPerCell * noOfInvisibleCells\n                : width * (1 - valueRatio)\n            }\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n      </defs>\n      {renderTextElement(darkContrastColor, CLIP_METER_FILLED + clipPathHash)}\n      {renderTextElement(lightContrastColor, CLIP_METER_EMPTY + clipPathHash)}\n    </g>\n  );\n};\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { timing } from '../utils';\n\nexport type AnimationType = {\n  value: number;\n  duration?: number;\n  startValue?: number;\n  enabled: boolean;\n  direction?: 'both' | 'reverse' | 'forward';\n  iterationCount?: number | 'infinite';\n  easing?: 'linear';\n};\n\nconst MAX_ANIMATION_PROGRESS = 1;\nconst MAX_LOOP_ANIMATION_PROGRESS = 2;\n\nexport const useCounterAnimation = ({\n  value,\n  duration = 1000,\n  startValue = 0,\n  enabled = false,\n  direction = 'forward',\n  iterationCount = 1,\n  easing = 'linear',\n}: AnimationType) => {\n  const [counterValue, setCounterValue] = useState(startValue);\n  const iteration = useRef(0);\n\n  const runAnimation = useCallback(() => {\n    iteration.current += 1;\n\n    return new Promise((resolve) => {\n      let startTime = 0;\n      const nextIterationDurationGap = duration / 5;\n      const step = (currentTime: number) => {\n        if (!startTime) {\n          startTime = currentTime;\n        }\n\n        //calculate the value to be used in calculating the number to be displayed\n        const progress = timing(\n          Math.min(\n            (currentTime - startTime) / duration,\n            direction === 'both'\n              ? MAX_LOOP_ANIMATION_PROGRESS\n              : MAX_ANIMATION_PROGRESS\n          ),\n          easing\n        );\n        function getNewValue(animationDir: AnimationType['direction']) {\n          if (animationDir === 'reverse') {\n            return (1 - progress) * (value - counterValue) + counterValue;\n          } else if (progress > 1 && animationDir === 'both') {\n            return (\n              (MAX_LOOP_ANIMATION_PROGRESS - progress) *\n                (value - counterValue) +\n              counterValue\n            );\n          } else {\n            return progress * (value - counterValue) + counterValue;\n          }\n        }\n        const newValue = getNewValue(direction);\n\n        //calculate what to be displayed using the value gotten above\n        setCounterValue(Math.floor(newValue));\n\n        if (\n          progress < MAX_ANIMATION_PROGRESS ||\n          (direction === 'both' && progress < MAX_LOOP_ANIMATION_PROGRESS)\n        ) {\n          window.requestAnimationFrame(step); //continue animation\n        } else {\n          window.cancelAnimationFrame(window.requestAnimationFrame(step));\n          resolve(true); //complete animation\n        }\n      };\n\n      // First loop of animation, take no delay\n      function runFirstIteration() {\n        window.requestAnimationFrame(step);\n      }\n\n      // For second loop for animation, take some pause before starting\n      function runNextIteration() {\n        setTimeout(() => {\n          window.requestAnimationFrame(step);\n        }, nextIterationDurationGap);\n      }\n      // start animation\n      (function startAnimation() {\n        iteration.current > 1 ? runNextIteration() : runFirstIteration();\n      })();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  useEffect(() => {\n    if (enabled) {\n      let animation = runAnimation();\n      const restartAnimation = () => {\n        animation.then(() => {\n          if (iterationCount === 'infinite') {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n          if (iteration.current < iterationCount) {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n        });\n      };\n      restartAnimation();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enabled, iterationCount, value]);\n\n  return enabled ? counterValue : value;\n};\n","import { useEffect, useState } from 'react';\n\nexport function useClipPathHash() {\n  const [hash, setHash] = useState<string>('');\n  useEffect(() => {\n    setHash((Math.random() + 1).toString(36).substring(7));\n  }, []);\n  return hash;\n}\n","import React, { ReactElement } from 'react';\nimport { BATTERY_BODY, CHARGING_FLASH } from '../constants';\nimport { useCounterAnimation } from '../hooks/useCounterAnimation';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\n\ntype Props = Omit<React.SVGProps<SVGPathElement>, \"scale\">\n\n// As per icon path\nconst iconWidth = 16.8; // As per path\nconst iconHeight = 28.7;\n\nexport default function Charging(pathProps: Props): ReactElement {\n  const { canvasWidth, canvasHeight, orientation, customization } =\n    useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { fill, scale, animated, animationDuration } = customization[CHARGING_FLASH];\n  const animatedOpacityPer = useCounterAnimation({\n    value: 100,\n    enabled: animated,\n    direction: 'both',\n    iterationCount: 'infinite',\n    duration: animationDuration,\n    startValue: 20,\n  });\n\n  const { width } = useLevelDimensions();\n  const iconXPos = width / 2 + iconWidth / 2;\n  const iconYPos = canvasHeight / 2 - iconHeight / 2;\n  const transformScale = scale ? `scale(${scale})` : '';\n  return (\n    <g\n      transform={\n        orientation === 'vertical'\n          ? `rotate(${-90})${transformScale}`\n          : transformScale\n      }\n      style={{\n        transformOrigin: `${canvasWidth / 2 - strokeWidth}px ${\n          canvasHeight / 2 - strokeWidth / 2\n        }px`,\n      }}\n      opacity={animatedOpacityPer / 100}\n    >\n      <path\n        d={`M${iconXPos},${iconYPos}l-13,16.8l7.4,0l-1.8,11.9l11.2,-16.8l-7.4,0l3.6,-11.9z`}\n        fill={fill}\n        {...pathProps}\n      />\n    </g>\n  );\n}\n","import React, { FC } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_CAP,\n  BATTERY_METER,\n  CANVAS_WIDTH,\n  CHARGING_FLASH,\n  READING_TEXT,\n} from './lib/constants';\nimport { Battery } from './lib/components/Battery';\nimport { Canvas } from './lib/Canvas';\nimport { BatteryLevel } from './lib/components/BatteryLevel';\nimport type {\n  DeepPartial,\n  FormatValue,\n  TGaugeCanvas,\n  TGaugeCustom,\n} from './typings';\nimport { defaultState } from './lib/store/context';\nimport { ReadingText } from './lib/components/ReadingText';\nimport { useCounterAnimation } from './lib/hooks/useCounterAnimation';\nimport { useClipPathHash } from './lib/hooks/useClipPathHash';\nimport Charging from './lib/components/Charging';\n\nexport interface Props\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'> {\n  /**\n   * Meter value range [0-100]\n   */\n  value: TGaugeCanvas['value'];\n  /**\n   * Meter max value\n   */\n  maxValue?: TGaugeCanvas['maxValue'];\n  /**\n   * Charging starting value\n   */\n  chargingStartValue?: TGaugeCanvas['chargingStartValue'];\n  /**\n   * Changes orientation, keeping text horizontal\n   */\n  orientation?: TGaugeCanvas['orientation'];\n\n  /**\n   * We don't like passing both width and height, can create unusual looking shape.\n   * Size will help gauge to achieve the desired size maintaining aspect ratio\n   */\n  size?: number;\n  /**\n   * Gauge aspect ratio,\n   * At padding 0 easy to create battery types ->\n   * D = 0.56,\n   * C = 0.52,\n   * AA = 0.28,\n   * AAA = 0.23,\n   * AAAA = 0.19 ,\n   * default C battery\n   */\n  aspectRatio?: number;\n  /**\n   * Padding of gauge within canvas\n   */\n  padding?: TGaugeCanvas['padding'];\n  /**\n   * Enable animation on mount\n   */\n  animated?: boolean;\n  /**\n   * Battery is charging\n   */\n  charging?: boolean;\n  /**\n   * Format the visible reading text as per your need\n   * Note: you can turn off percentage symbol from customizations\n   */\n  formatValue?: FormatValue;\n  /**\n   * All components customization\n   */\n  customization?: DeepPartial<TGaugeCustom>;\n}\n\nexport const BatteryGauge: FC<Props> = ({\n  size = 300,\n  aspectRatio = defaultState.aspectRatio,\n  children,\n  padding = defaultState.padding,\n  value = defaultState.value,\n  chargingStartValue = defaultState.chargingStartValue,\n  maxValue = defaultState.maxValue,\n  customization = defaultState.customization,\n  orientation = defaultState.orientation,\n  animated = defaultState.animated,\n  charging = defaultState.charging,\n  formatValue = (value) => value,\n  ...restSvgProps\n}) => {\n  const canvasHeight = Math.round(CANVAS_WIDTH * aspectRatio);\n  const height = Math.round(size * aspectRatio);\n  const clipPathHash = useClipPathHash();\n  const noLowBatteryColor = charging\n    ? {\n        lowBatteryFill:\n          customization[BATTERY_METER]?.fill ||\n          defaultState.customization[BATTERY_METER].fill,\n      }\n    : {};\n\n  const allCustomization: TGaugeCustom = {\n    [BATTERY_BODY]: {\n      ...defaultState.customization[BATTERY_BODY],\n      ...customization[BATTERY_BODY],\n    },\n    [BATTERY_CAP]: {\n      ...defaultState.customization[BATTERY_CAP],\n      ...customization[BATTERY_CAP],\n    },\n    [BATTERY_METER]: {\n      ...defaultState.customization[BATTERY_METER],\n      ...customization[BATTERY_METER],\n      ...noLowBatteryColor,\n    },\n    [READING_TEXT]: {\n      ...defaultState.customization[READING_TEXT],\n      ...customization[READING_TEXT],\n    },\n    [CHARGING_FLASH]: {\n      ...defaultState.customization[CHARGING_FLASH],\n      ...customization[CHARGING_FLASH],\n    },\n  };\n  const canvasPadding = allCustomization.batteryBody.strokeWidth / 2 + padding;\n  const newValue = useCounterAnimation({\n    value: value,\n    enabled: animated,\n  });\n  const chargingValue = useCounterAnimation({\n    startValue: chargingStartValue,\n    value: maxValue,\n    enabled: charging,\n    iterationCount: 'infinite',\n    duration: 2000,\n  });\n  return (\n    <Canvas\n      width={size}\n      height={orientation === 'vertical' ? size : height}\n      canvasWidth={CANVAS_WIDTH}\n      canvasHeight={canvasHeight}\n      padding={canvasPadding}\n      value={charging ? chargingValue : newValue}\n      chargingStartValue={chargingStartValue}\n      maxValue={!maxValue ? 1 : maxValue}\n      orientation={orientation}\n      customization={allCustomization}\n      clipPathHash={clipPathHash}\n      {...restSvgProps}\n    >\n      <g\n        transform={\n          orientation === 'vertical'\n            ? `rotate(-90,${CANVAS_WIDTH / 2},${canvasHeight / 2})` // rotate at right top corner\n            : ''\n        }\n      >\n        <Battery />\n        <BatteryLevel />\n        {charging ? <Charging /> : <ReadingText formatValue={formatValue} />}\n        {children}\n      </g>\n    </Canvas>\n  );\n};\n\nexport default BatteryGauge;\n"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","BATTERY_ASPECT_RATIO","BATTERY_BODY","BATTERY_CAP","BATTERY_METER","READING_TEXT","CHARGING_FLASH","CLIP_METER","CLIP_METER_FILLED","CLIP_METER_EMPTY","CLIP_CAP","defaultState","canvasWidth","canvasHeight","aspectRatio","padding","value","chargingStartValue","maxValue","clipPathHash","orientation","animated","charging","customization","batteryBody","strokeWidth","cornerRadius","fill","strokeColor","batteryCap","capToBodyRatio","batteryMeter","lowBatteryValue","lowBatteryFill","outerGap","noOfCells","interCellsGap","readingText","lightContrastColor","darkContrastColor","lowBatteryColor","fontFamily","fontSize","showPercentage","chargingFlash","scale","undefined","animationDuration","Context","createContext","useGaugeContext","useContext","useBatteryDimensions","batteryCapRatio","_useGaugeContext","objectHeight","capHeight","capWidth","bodyWidth","bodyHeight","Battery","_customization$BATTER","bodyStrokeColor","bodyStrokeWidth","bodyFill","bodyCornerRadius","_customization$BATTER2","capStrokeColor","capStrokeWidth","capFill","capCornerRadius","_useBatteryDimensions","React","id","x","y","width","height","className","rx","ry","stroke","clipPath","CanvasProvider","_ref","children","Provider","Canvas","props","otherSvgProps","_objectWithoutPropertiesLoose","_excluded","viewBox","useLevelDimensions","useMemo","innerBodyWidth","innerBodyHeight","getValueInPercentage","Math","round","checkLowBattery","getVisibleCellsCount","floor","abs","timing","progress","easing","BatteryLevel","_useLevelDimensions","gradFill","cellList","noOfVisibleCells","Array","map","item","key","color","offset","stopColor","_item","index","ReadingText","formatValue","_customization$READIN","otherTextProps","percentageSign","valueRatio","isCellTypeBattery","noOfInvisibleCells","widthPerCell","readingValue","renderTextElement","contrastColor","clipPathId","dominantBaseline","textAnchor","fontWeight","writingMode","areaFilledWidth","max","MAX_ANIMATION_PROGRESS","MAX_LOOP_ANIMATION_PROGRESS","useCounterAnimation","_ref$duration","duration","_ref$startValue","startValue","_ref$enabled","enabled","_ref$direction","direction","_ref$iterationCount","iterationCount","_ref$easing","_useState","useState","counterValue","setCounterValue","iteration","useRef","runAnimation","useCallback","current","Promise","resolve","startTime","nextIterationDurationGap","step","currentTime","min","getNewValue","animationDir","newValue","window","requestAnimationFrame","cancelAnimationFrame","runFirstIteration","runNextIteration","setTimeout","startAnimation","useEffect","animation","restartAnimation","then","useClipPathHash","hash","setHash","random","toString","substring","iconWidth","iconHeight","Charging","pathProps","_customization$CHARGI","animatedOpacityPer","iconXPos","iconYPos","transformScale","transform","style","transformOrigin","opacity","d","BatteryGauge","size","_ref$size","_ref$aspectRatio","_ref$padding","_ref$value","_ref$chargingStartVal","_ref$maxValue","_ref$customization","_ref$orientation","_ref$animated","_ref$charging","_ref$formatValue","restSvgProps","noLowBatteryColor","allCustomization","_allCustomization","_extends","canvasPadding","chargingValue"],"mappings":"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"}